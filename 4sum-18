class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;        // to store all the 4-number combos
        int n = nums.size();
        sort(nums.begin(), nums.end()); // step1: sort for easy skipping of dups

        // step2: fix first two nums
        for (int i = 0; i < n; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) continue; // skip same i

            for (int j = i + 1; j < n; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue; // skip same j

                long long rem = (long long)target - nums[i] - nums[j]; // what's left to find
                int l = j + 1, r = n - 1; // two-pointer setup for remaining 2

                while (l < r) {
                    long long sum2 = (long long)nums[l] + nums[r];

                    if (sum2 < rem) l++;           // need bigger sum, go right
                    else if (sum2 > rem) r--;      // need smaller sum, go left
                    else {
                        // boom! found one combo
                        ans.push_back({nums[i], nums[j], nums[l], nums[r]});

                        // skip duplicate l & r values
                        int lv = nums[l], rv = nums[r];
                        while (l < r && nums[l] == lv) l++;
                        while (l < r && nums[r] == rv) r--;
                    }
                }
            }
        }

        return ans;
    }
};
