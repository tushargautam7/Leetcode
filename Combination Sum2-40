#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<vector<int>> ans;  // final result store karenge
    vector<int> curr;         // temporary combination

    void backtrack(vector<int>& candidates, int target, int start) {
        // base case: agar target 0 hua, ek valid combination mil gaya
        if (target == 0) {
            ans.push_back(curr);
            return;
        }
        if(target<0)return;

        // loop from current index to end
        for (int i =start; i < candidates.size(); i++) {
            if(i>start && candidates[i]==candidates[i-1])continue;
            if (candidates[i] > target) break;  // target se bada -> skip

            curr.push_back(candidates[i]);                   // choose current number
            backtrack(candidates, target - candidates[i], i+1); // i -> same number reuse allowed
            curr.pop_back();                                 // backtrack
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end()); // optional, faster pruning
        backtrack(candidates, target, 0);
        return ans;
    }
};
