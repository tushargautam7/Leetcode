class Node {
public:
    int val;
    Node* next;
    Node* random;

    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (!head) return NULL;

        unordered_map<Node*, Node*> mp; // old -> new

        // Pass 1: create new nodes
        Node* curr = head;
        while (curr) {
            mp[curr] = new Node(curr->val);
            curr = curr->next;
        }

        // Pass 2: set next and random pointers
        curr = head;
        while (curr) {
            mp[curr]->next = mp[curr->next];       // next set
            mp[curr]->random = mp[curr->random];   // random set
            curr = curr->next;
        }

        return mp[head];
    }
};
