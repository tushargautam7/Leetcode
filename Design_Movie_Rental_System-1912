#include <bits/stdc++.h>
using namespace std;

class MovieRentingSystem {
    // price lookup
    unordered_map<long long, int> price;  
    // available[ movie ] = set of {price, shop}
    unordered_map<int, set<pair<int,int>>> available;
    // rented = set of {price, shop, movie}
    set<tuple<int,int,int>> rented;

    long long key(int shop, int movie) {
        return ((long long)shop << 32) | movie;
    }

public:
    MovieRentingSystem(int n, vector<vector<int>>& entries) {
        for (auto &e : entries) {
            int shop = e[0], movie = e[1], p = e[2];
            price[key(shop,movie)] = p;
            available[movie].insert({p, shop});
        }
    }
    
    vector<int> search(int movie) {
        vector<int> ans;
        auto &s = available[movie];
        int k = 0;
        for (auto &[p, shop] : s) {
            if (k == 5) break;
            ans.push_back(shop);
            k++;
        }
        return ans;
    }
    
    void rent(int shop, int movie) {
        int p = price[key(shop,movie)];
        available[movie].erase({p, shop});
        rented.insert({p, shop, movie});
    }
    
    void drop(int shop, int movie) {
        int p = price[key(shop,movie)];
        rented.erase({p, shop, movie});
        available[movie].insert({p, shop});
    }
    
    vector<vector<int>> report() {
        vector<vector<int>> ans;
        int k = 0;
        for (auto &[p, shop, movie] : rented) {
            if (k == 5) break;
            ans.push_back({shop, movie});
            k++;
        }
        return ans;
    }
};
