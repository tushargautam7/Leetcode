class FoodRatings {
    // Store food -> {rating, cuisine}
    unordered_map<string, pair<int,string>> foodInfo;

    // For each cuisine, keep an ordered set of (rating, food)
    unordered_map<string, set<pair<int,string>>> cuisineFoods;

public:
    FoodRatings(vector<string>& foods, vector<string>& cuisines, vector<int>& ratings) {
        int n = foods.size();
        for (int i = 0; i < n; i++) {
            string food = foods[i];
            string cuisine = cuisines[i];
            int rating = ratings[i];
            foodInfo[food] = {rating, cuisine};
            // Insert with negative rating to make higher rating come first
            cuisineFoods[cuisine].insert({-rating, food});
        }
    }

    void changeRating(string food, int newRating) {
        auto [oldRating, cuisine] = foodInfo[food];
        // Remove old entry
        cuisineFoods[cuisine].erase({-oldRating, food});
        // Insert new entry
        cuisineFoods[cuisine].insert({-newRating, food});
        // Update map
        foodInfo[food] = {newRating, cuisine};
    }

    string highestRated(string cuisine) {
        // begin() has the highest rating & lexicographically smallest food
        return cuisineFoods[cuisine].begin()->second;
    }
};
