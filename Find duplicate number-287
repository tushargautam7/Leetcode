#include <bits/stdc++.h>
using namespace std;

int findDuplicate(vector<int>& nums) {
    // Step 1: Use Floyd's cycle detection
    int slow = nums[0];
    int fast = nums[0];
    
    // Keep moving until they meet
    do {
        slow = nums[slow];         // 1 step
        fast = nums[nums[fast]];   // 2 steps
    } while (slow != fast);
    
    // Step 2: Find the entrance to the cycle
    slow = nums[0];
    while (slow != fast) {
        slow = nums[slow];
        fast = nums[fast];
    }
    return slow; // or fast
}

int main() {
    vector<int> nums = {3,1,3,4,2};
    cout << "Duplicate Number: " << findDuplicate(nums) << endl;
    return 0;
}





int findDuplicate(vector<int>& nums) {
    unordered_set<int> seen;   // set banaya track rakhne ke liye
    for (int num : nums) {
        if (seen.count(num)) { // agar already set me h to duplicate mil gaya
            return num;
        }
        seen.insert(num);      // warna set me dal do
    }
    return -1; // ideally kabhi nahi aayega, problem guarantee deta hai ek duplicate hoga
}
