#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    // Main function to find minimum eating speed
    int minEatingSpeed(vector<int>& piles, int h) {
        int low = 1; // sabse kam speed
        int high = *max_element(piles.begin(), piles.end()); // sabse badi pile jitni speed max ho sakti hai

        int ans = high; // answer ko max se shuru kiya

        // binary search chal raha hai speed ke upar
        while (low <= high) {
            int mid = low + (high - low) / 2; // current speed jisme test kar rahe

            long long totalHours = 0; // is speed pe total kitna time lagega wo yaha store hoga

            // ============================================
            // FULL for loop without shortcut â€” stall-wise banana ginna
            for (int i = 0; i < piles.size(); i++) {
                int bananas = piles[i]; // i-th stall ke bananas
                int hoursForThisStall = (bananas + mid - 1) / mid; // ceil(bananas/mid)
                totalHours += hoursForThisStall; // total me jod diya
            }
            // ============================================

            // agar time h se kam hai to try slower speed
            if (totalHours <= h) {
                ans = mid;        // yeh speed chal gayi
                high = mid - 1;   // aur slow try karte hain
            } else {
                low = mid + 1;    // time zyada lag gaya toh speed badhao
            }
        }

        return ans; // minimum required speed
    }
};
