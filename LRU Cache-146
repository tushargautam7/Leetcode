class LRUCache {
private:
    int capacity;
    list<pair<int, int>> cache; // {key, value}
    unordered_map<int, list<pair<int, int>>::iterator> map;

public:
    LRUCache(int capacity) {
        this->capacity = capacity;
    }

    int get(int key) {
        if (map.find(key) == map.end()) return -1;

        // Move the accessed node to the front (most recently used)
        auto it = map[key];
        int value = it->second;

        cache.erase(it);
        cache.push_front({key, value});
        map[key] = cache.begin();

        return value;
    }

    void put(int key, int value) {
        // If key already exists, remove it first
        if (map.find(key) != map.end()) {
            cache.erase(map[key]);
        }
        // Insert new key-value pair at the front
        cache.push_front({key, value});
        map[key] = cache.begin();

        // If over capacity, remove the least recently used (from the back)
        if (cache.size() > capacity) {
            auto lru = cache.back();
            map.erase(lru.first);
            cache.pop_back();
        }
    }
};

