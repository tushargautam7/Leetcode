class Solution {
public:
     int minimumTeachings(int n, vector<vector<int>>& languages, vector<vector<int>>& friendships) {
        int m = languages.size();

        // Step 1: har user ke known langs ko set me daal (for fast lookup)
        vector<unordered_set<int>> knows(m+1);
        for (int i = 0; i < m; i++) {
            for (int lang : languages[i]) knows[i+1].insert(lang);
        }

        // Step 2: find all problematic users (friendship with no common lang)
        unordered_set<int> problematic;
        for (auto &f : friendships) {
            int u = f[0], v = f[1];
            bool canTalk = false;
            for (int lang : knows[u]) {
                if (knows[v].count(lang)) { canTalk = true; break; }
            }
            if (!canTalk) {
                problematic.insert(u);
                problematic.insert(v);
            }
        }

        // If no problematic, no need to teach
        if (problematic.empty()) return 0;

        // Step 3: for each language, count how many problematic already know it
        int res = INT_MAX;
        for (int lang = 1; lang <= n; lang++) {
            int alreadyKnow = 0;
            for (int u : problematic) {
                if (knows[u].count(lang)) alreadyKnow++;
            }
            int needTeach = (int)problematic.size() - alreadyKnow;
            res = min(res, needTeach);
        }
        return res;
    }
};
