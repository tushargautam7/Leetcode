class Solution {
public:

    void dfs(vector<vector<int>>&heights, vector<vector<bool>>&visited, int i, int j){
        int m = heights.size();
        int n = heights[0].size();
        visited[i][j] = true; // bro yeh cell ab humne visit kar liya âœ…

        // niche jaa sakte h agar next cell bada ya equal h
        if(i+1<m && !visited[i+1][j] && heights[i+1][j]>=heights[i][j])
            dfs(heights, visited, i+1, j);

        // upar check karo
        if(i-1>=0 && !visited[i-1][j] && heights[i-1][j]>=heights[i][j])
            dfs(heights, visited, i-1, j);

        // right side check
        if(j+1<n && !visited[i][j+1] && heights[i][j+1]>=heights[i][j])
            dfs(heights, visited, i, j+1);

        // left side check (bro tu yaha galat compare kar raha tha)
        if(j-1>=0 && !visited[i][j-1] && heights[i][j-1]>=heights[i][j])
            dfs(heights, visited, i, j-1);
    }

    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int m = heights.size();
        int n = heights[0].size();

        // pacific aur atlantic dono ke visited map banaye
        vector<vector<bool>> pac(m, vector<bool>(n, false));
        vector<vector<bool>> atl(m, vector<bool>(n, false));

        // pacific edges se dfs
        for(int i=0;i<m;i++) dfs(heights, pac, i, 0);
        for(int j=0;j<n;j++) dfs(heights, pac, 0, j);

        // atlantic edges se dfs
        for(int i=0;i<m;i++) dfs(heights, atl, i, n-1);
        for(int j=0;j<n;j++) dfs(heights, atl, m-1, j);

        vector<vector<int>> res;
        // dono me visited hoga tabhi result me daalna ðŸ¤˜
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(pac[i][j] && atl[i][j])
                    res.push_back({i,j});
            }
        }
        return res;
    }
};
