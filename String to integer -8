class Solution {
public:
    int myAtoi(std::string s) {
        int i = 0, n = s.length();
        // Skip leading whitespaces
        while (i < n && s[i] == ' ') i++;
        // Handle empty string case after trimming
        if (i == n) return 0;
        // Handle optional sign
        int sign = 1;
        if (s[i] == '+' || s[i] == '-') {
            sign = (s[i] == '-') ? -1 : 1;
            i++;
        }
        // Parse digits
        long result = 0;
        while (i < n && isdigit(s[i])) {
            int digit = s[i] - '0';
            if (result > (INT_MAX - digit) / 10) // Check for overflow
                return sign == 1 ? INT_MAX : INT_MIN;
            result = result * 10 + digit;
            i++;
        }
        return static_cast<int>(result * sign);
    }
};
